import scrapy



#creating Flat class to be able to assign flat characteristics to objects and append to csv file
class Flat(scrapy.Item):
    name        = scrapy.Field()
    price       = scrapy.Field()
    price_m2        = scrapy.Field()
    m2       = scrapy.Field()
    rooms        = scrapy.Field()
    floor       = scrapy.Field()
    #mapka       = scrapy.Field()
    url = scrapy.Field()

#getting flats details from links to offers
class LinksSpider(scrapy.Spider):
    name = 'flats'
    allowed_domains = ['https://olx.pl/']
    #get links from links.csv generated by previous spider
    try:
        with open("links.csv", "rt") as f:
            start_urls = [url.strip() for url in f.readlines()][1:]
    except:
        start_urls = []
    #main functionality of the spider - getting info about offers
    def parse(self, response):
        p = Flat()
        #creating xpaths to information on the specific flat
        name_xpath        = '//h1/text()'
        price_xpath       = '//h3/text()'
        #xpath to info pane containing a list of information on flats
        details_xpath        = '//p[re:test(@class, "css-xl6fe0-Text eu5v0x0.*")]//text()'
       #rent_xpath        = '//h1/text()'
        #map_xpath       = '//p[re:test(@class, "css-xl6fe0-Text eu5v0x0.*")]//text()'

        #avoiding errors with try&except, data cleaning and choosing accurate values for specific columns
        try:
            p['price_m2'] = str(str([s for s in response.xpath(details_xpath).getall() if "Cena" in s]).split(':')[1]).split('z')[0]
        except:
            str([s for s in response.xpath(details_xpath).getall() if "Cena" in s]) is None
        try:
            p['m2'] = str(str([s for s in response.xpath(details_xpath).getall() if "Powierzchnia" in s]).split(':')[1]).split('m')[0]
        except:
            str([s for s in response.xpath(details_xpath).getall() if "Powierzchnia" in s]) is None
        try:
            p['rooms'] = str(str([s for s in response.xpath(details_xpath).getall() if "Liczba" in s]).split(':')[1]).split(' ')[1]
        except:
            str([s for s in response.xpath(details_xpath).getall() if "Liczba" in s]) is None
        try:
            p['floor']       = str(str([s for s in response.xpath(details_xpath).getall() if "Poziom" in s]).split(':')[1]).split("'")[0]
        except:
            str([s for s in response.xpath(details_xpath).getall() if "Poziom" in s]) is None
        #p['mapka']       = response.xpath(map_xpath).getall()[2]
        p['url']       = response.request.url
        p['name']        = response.xpath(name_xpath).getall()
        try:
            p['price']       = response.xpath(price_xpath).getall()[0]
        except:
            p['price']=[]
        yield p 
#flats details
